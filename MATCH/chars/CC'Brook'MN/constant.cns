; Constants and state file.
; There are comments scattered through this file, so you may like to
; take a look if would like to learn more about the cns.

; Var List:
;===============================================================================
; 1 - ground dust effect ¹ 1001
; 2 - Yahazu Giri (Combo & Air Type)
; 3 - Sworow Band Avant (Landing Anim)
; 4 - Music Note Explod for Intro P1
; 5(fvar),6,10,11,15 - Hit Sparks
; 7 - Fruit Mode (Freeze enemy)
; 8 - Power up system
; 9,18 - Regeneration (Low life Safe Mode)
; 12- Gitar special: (random var, random melody)
; 13,14 - Sonet ¹1 special (random var, 5 sec p2 lose control)
; 16,17 - Sonet ¹2 special (5 sec p2 slow time)
; 19,20 - Sonet ¹3 special (10 sec paralize);
; 21 - Musical Specials Random Anim(random var)
; 22,23 - Revive Mode (Death Safe Mode)
; 24 - Polka Remise (Super)
; 25 - Aubade Cuop Droit (Super)
; 26 - Prelude Au Fer (Super)
; 27 - Hanauta Sanchou: Yahazu Giri (Super)
; 28 - AI controller
;
;===============================================================================
[Data]
life = 1000		;Amount of life to start with
power = 3000		;Amount of maximum power
attack = 100		;attack power (more is stronger)
defence = 100		;defensive power (more is stronger)
fall.defence_up = 50	;Percentage to increase defense everytime player is knocked down
liedown.time = 60	;Time which player lies down for, before getting up
airjuggle = 15		;Number of points for juggling
sparkno = 2		;Default hit spark number for HitDefs
guard.sparkno = 40	;Default guard spark number
KO.echo = 0		;1 to enable echo on KO
volume = 0		;Volume offset (negative for softer)
IntPersistIndex = 60	;Variables with this index and above will not have their values
FloatPersistIndex = 40  ;reset to 0 between rounds or matches. There are 60 int variables,
;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
;If omitted, then it defaults to 60 and 40 for integer and float
;variables repectively, meaning that none are persistent, i.e. all
;are reset. If you want your variables to persist between matches,
;you need to override state 5900 from common1.cns.


[Size]
xscale = 1		;Horizontal scaling factor.
yscale = 1		;Vertical scaling factor.
ground.back = 15	;Player width (back, ground)
ground.front = 16	;Player width (front, ground)
air.back = 12		;Player width (back, air)
air.front = 12		;Player width (front, air)
height = 60		;Height of player (for opponent to jump over)
attack.dist = 160	;Default attack distance
proj.attack.dist = 90	;Default attack distance for projectiles
proj.doscale = 0	;Set to 1 to scale projectiles too
head.pos = -5, -90	;Approximate position of head
mid.pos = -5, -60	;Approximate position of midsection
shadowoffset = 2	;Number of pixels to vertically offset the shadow
draw.offset = 0,0	;Player drawing offset in pixels (x, y)

[Velocity]
walk.fwd  = 2.0	        ;Walk forward
walk.back = -2.0	;Walk backward
run.fwd  = 20, 0	;Run forward (x, y)
run.back = -5.5,-5.8	;Hop backward (x, y)
jump.neu = 0,-8.4	;Neutral jumping velocity (x, y)
jump.back = -2.55	;Jump back Speed (x, y)
jump.fwd = 2.5		;Jump forward Speed (x, y)
runjump.back = -2.55,-8.1;Running jump speeds (opt)
runjump.fwd = 4,-8.1
airjump.neu = 0,-8.1
airjump.back = -2.55    ;Air jump speeds (opt)
airjump.fwd = 2.5

[Movement]
airjump.num = 1		;Number of air jumps allowed (opt)
airjump.height = 40	;Minimum distance from ground before you can air jump (opt)
yaccel = .30	        ;Vertical acceleration
stand.friction = .85	;Friction coefficient when standing
crouch.friction = .82	;Friction coefficient when crouching
;===============================================================================
; Format:
; [Statedef STATENO]
; type = ?      S/C/A/L  stand/crouch/air/liedown
; movetype = ?  I/A/H    idle/attack/gethit
; physics = ?   S/C/A/N  stand/crouch/air/none
; juggle = ?             air juggle points move requires
;
; [State STATENO, ?]     ? - any number you choose
; type = ?
; ...
;===============================================================================

;Pre Intro
[Statedef 5900]
type = S
ctrl = 0
anim = 5900

[State 190, 1]
type = ChangeAnim
trigger1 = RoundState >= 0
value = 5900

[State 190, 2]
type = AssertSpecial
trigger1 = 1
flag = Intro

[State 180, 1]
type = ChangeState
trigger1 = Time = 0
value = 191
;---------------------------------------------------------------------------
; Intro1
[Statedef 191]
type = S
ctrl = 0
anim = 5900
velset = 0,0


[state 20, 0]
type = playsnd
trigger1= animelem =1
value = S1,6
volume = 1

[state 20, 0]
type = playsnd
trigger1= animelem =5
trigger2= animelem =9
trigger3= animelem =13
value = S1,1
volume = 1

[State 0, AssertSpecial]
type = AssertSpecial
trigger1 = 1
flag = nobardisplay

[State 0, ChangeAnim]
type = ChangeAnim
trigger1 = facing = -1
trigger1 = enemy,stateno!=0
value = 5900
elem = 1

[State 190, 2]
type = AssertSpecial
trigger1 = 1
flag = Intro

[State 0, PlaySnd]
type = PlaySnd
trigger1 = animelem = 6
value = S1,7

[State 190, 4]
type = ChangeState
trigger1 = !Animtime
value = 0
;---------------------------------------------------------------------------


; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -3]

;This controller plays a sound everytime the player lands from a jump, or
;from a back-dash.
[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = 40, 0
